<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | @janeeats on code and design]]></title>
  <link href="http://janeeats.github.com/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://janeeats.github.com/"/>
  <updated>2013-04-22T12:54:10-04:00</updated>
  <id>http://janeeats.github.com/</id>
  <author>
    <name><![CDATA[Jane Vora]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arrays vs. Linked Lists]]></title>
    <link href="http://janeeats.github.com/blog/2013/04/22/arrays-vs-linked-lists/"/>
    <updated>2013-04-22T12:27:00-04:00</updated>
    <id>http://janeeats.github.com/blog/2013/04/22/arrays-vs-linked-lists</id>
    <content type="html"><![CDATA[<p>Today at Flatiron School we started researching common Computer Science questions we might be asked during interviews. A common topic is the difference between Arrays and Linked Lists. I've used arrays lots of times in coding, but I had no idea what a linked list is. Below is a summary about what the differences between the two and their common use cases.</p>

<p>Both Arrays and Linked Lists are used to store linear data of similar types. Depending on your application or requirement, you may elect to pick one over the other.</p>

<!-- more -->


<h2>Arrays</h2>

<p><strong>What's an Array?</strong></p>

<ul>
<li>Typically arrays are denoted in bracket notation.</li>
</ul>


<!-- code example -->


<pre><code>fav_nums = [10, 27, 12]
fav_colors = ["yellow", "red", "orange", "green"]
</code></pre>

<ul>
<li>Array size is allocated when it's declared.</li>
</ul>


<!-- code example -->


<pre><code>fav_nums.size # =&gt; returns 3
fav_colors.size # =&gt; returns 4
</code></pre>

<p><strong>Advantages:</strong></p>

<ul>
<li>A common use case for arrays is frequent searching.</li>
</ul>


<!-- code example -->


<pre><code>fav_nums[0] # =&gt; returns 10
fav_colors[3] # =&gt; returns "green"
</code></pre>

<p><strong>Disadvantages:</strong></p>

<ul>
<li>Array size is often fixed and specified at compile time. If you allocate arrays large in size in anticipation of data needs, you're allocating arrays with wasted space and may potentially crash.</li>
<li>Inserting new elements or deleting existing elements at the front of an array is potentially expensive because existing elements need to be shifted or unshifted to make room.</li>
<li>If you have trouble remembering the difference between shift and unshift... just take out the f and think about what they do. Got that handy tip from stackoverflow!</li>
</ul>


<h2>Linked Lists</h2>

<p><strong>What's a Linked List?</strong></p>

<ul>
<li>The structure of Linked Lists consist of nodes. Think of nodes like the links in a chain.</li>
<li>Each node contains 2 fields: a data field (the actual stored value) and reference field (which points to which element is next aka the "link").</li>
<li>The references or pointers in nodes are what connect all of the nodes together.</li>
</ul>


<p><strong>Pros:</strong></p>

<ul>
<li>Linked Lists may be sized dynamically. If your application requires dynamically sized lists, you'll want to use a Linked List.</li>
<li>Use Linked Lists if your application requires frequent insertion or deletion of elements at a specific location.</li>
</ul>


<p><strong>Why?</strong></p>

<ul>
<li>Memory is allocated differently for Linked Lists than Arrays.</li>
<li>Arrays lump one block of memory for all of its elements.</li>
<li>Linked Lists allocate space for each element separately in its own block of memory called a "node" or a "linked list element."</li>
</ul>


<p><strong>What else?</strong></p>

<ul>
<li>It's easier to store data of different sizes in a linked list. An array assumes every element is exactly the same size.</li>
<li>As you mentioned, it's easier for a linked list to grow organically. An array's size needs to be known ahead of time, or re-created when it needs to grow.</li>
<li>Shuffling a linked list is just a matter of changing what points to what. Shuffling an array is more complicated and/or takes more memory.</li>
<li>As long as your iterations all happen in a "foreach" context, you don't lose any performance in iteration.</li>
</ul>


<p><strong>Resources:</strong></p>

<ul>
<li>Super detailed explanation of <a href="http://cslibrary.stanford.edu/103/LinkedListBasics.pdf">Linked Lists by the CS department at Stanford</a></li>
<li>Good ole <a href="http://en.wikipedia.org/wiki/Linked_list">Wikipedia's Linked List entry</a></li>
<li>Ruby doesn't have Linked Lists. Hashes are similar to Linked Lists in that they have references (keys) and values, but they're not the same. Here's how someone wrote <a href="http://khakimov.com/blog/2012/05/11/back-to-school-linked-list-with-ruby/">a Linked List in Ruby</a>.</li>
<li>Listened to <a href="http://prettymuchamazing.com/music/stream/solange-true-ep">Solange's True EP</a> and the new <a href="http://www.youtube.com/watch?v=5NV6Rdv1a3I">Daft Punk "Get Lucky" track</a> while writing this blog post</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jane Dreams of Programming]]></title>
    <link href="http://janeeats.github.com/blog/2013/02/24/how-to-eat-an-elephant/"/>
    <updated>2013-02-24T14:33:00-05:00</updated>
    <id>http://janeeats.github.com/blog/2013/02/24/how-to-eat-an-elephant</id>
    <content type="html"><![CDATA[<h2>How Programming Is Changing The Way I View Everything</h2>

<p>Lately, I've been dreaming of programming. In my dreams, I'm breaking down problems, explaining them in metaphors. It reminds me of my dreams in Chinese while I studied abroad in Beijing my junion year of college. Living in China changed how I saw everything... for example I will never, ever take Modern Plumbing for granted again.</p>

<p>In this post, I share 3 observations on how learning Ruby these past few weeks has already profoundly changed the way I think.</p>

<!-- more -->


<p><strong>How Do You Eat an Elephant? One Bite at a Time.</strong>
I recently had a skype session with my business partner. We've been trying to launch a business for the past year or so. We've hit so many road blocks. Learning to program really highlighted for me the source of our problems. We were trying to bite off more than we could chew. Instead of trying to solve one problem at a time, we were trying to solve 20 simultaneously. We came back from the drawing board with a simple idea, broken down into small, manageable bites.</p>

<p><strong>Embrace the Frustration.</strong>
Programming is challenging, rewarding, and at times extremely frustrating. Being frustrated is part of the process. I'm not going to master everything in Ruby immediately. Every line of code I'm testing will not pass on the first try. I am learning to be comfortable with my frustration. When I see an error, I'm trying to catch myself from internally screaming, "Why the fuck does this not work?!" to responding with "Yes! An error! I can fix that."</p>

<p><strong>Use Your Broken-Ass Skills Constantly To Become Fluent.</strong>
In the same way I learned Chinese by living and studying in Beijing, the Flatiron School is truly an immersive way to learn programming - just dive in and try to use the little code you know as often as possible. The language will start to feel more fluent the more you use it. I need to remind myself constantly that it's ok to just use my broken ass Ruby and that eventually it will become <a href="http://eloquentruby.com/">eloquent Ruby</a>...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jiro Dreams of Sushi and Jane Dreams of Applications]]></title>
    <link href="http://janeeats.github.com/blog/2013/02/05/why-i-am-at-the-flatiron-school/"/>
    <updated>2013-02-05T17:22:00-05:00</updated>
    <id>http://janeeats.github.com/blog/2013/02/05/why-i-am-at-the-flatiron-school</id>
    <content type="html"><![CDATA[<h2>Why am I at the Flatiron School?</h2>

<p>While I liked my old job as the Interactive Designer/Developer for the New York City Economic Development Corporation, I was ready for a change. I'm pretty sure if I had to design just one more email template or tweak one more WordPress theme, I was gonna go crazy. I fell out of love with design at my old job. Then I encountered two pieces of inspiration that helped me find my way...</p>

<!-- more -->


<p><strong>Jiro Dreams of Sushi.</strong> It's on Netflix, so if you haven't seen it yet, I highly recommend you watch it or at least add it to your <a href="http://movies.netflix.com/WiMovie/Jiro_Dreams_of_Sushi/70181716?locale=en-US" title="Jiro Dreams of Sushi on Netflix Streaming">instant queue</a>. In case you haven't heard of it before, Jiro Dreams of Sushi is a documentary that follows Jiro, an 85-year-old master sushi chef in Japan and owner of Sukiyabashi Jiro, a Michelin three-star, 10-seat restaurant.</p>

<p>On the second time I watched it, I was really struck by the way Jiro spoke about his craft. He clearly loves his work and it drives him. He strives for perfection.</p>

<blockquote><p>Jiro says:
"Once you decide your profession, you must immerse yourself in the study of it. You must learn to fall in love with your work. Never complain about your work. You must dedicate your life to mastering that skill. That's the secret of success... and is the key to being regarded honorably."</p></blockquote>

<p><strong>As a web designer, I realized that I needed to immerse myself in the study of web development.</strong> I needed to figure out a way to fall back in love with web design. I knew that I couldn't keep talking and dreaming about "wouldn't it be cool if..." applications. I must build the applications I want to use.</p>

<blockquote><p>His oldest son, Yoshikazu, who leads the work at his father's restaurant, says of his father:
"Always look ahead and above yourself. Always try to improve on yourself. Always strive to elevate your craft. That's what he taught me."</p></blockquote>

<p>From a career perspective, I knew that in order to elevate my work, I needed to be able to provide more than simple front end design. With HTML/CSS skills being almost a requirement nowadays for most web designers, eventually I would have to learn how to program.</p>

<p><strong>I first heard about Ruby on Rails</strong> from my oldest brother, <a href="http://twitter.com/theevo" title="@theevo">Theo</a>, who is a huuuuge fan of <a href="http://37signals.com/" title="the coolest company">37signals</a> (for those who don't know 37signals gave birth to Ruby on Rails). I had been curious about learning Ruby on Rails for some time and that's what led me to find the <a href="http://flatironschool.com/" title="Learn Ruby on Rails in NYC">Flatiron School</a>.</p>

<p>Lastly, I want to end with a <strong>book recommendation: <em>Steal Like an Artist</em> by Austin Kleon.</strong> I think the tagline, "10 Things Nobody Told You About Being Creative," sums it up well. I think a bit more accurate tagline is "10 Guidelines to Help You In Being Creative." The book is an excellent read.. but if you're on a tight budget, he's got a great <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=oww7oB9rjgw" title="Austin Kleon TED Talk on Creative Work">TED talk</a>.</p>

<p><strong>To anyone out there stuck in a rut,</strong> Kleon's book really inspired me to outline concrete actions to start producing creative work again. It literally motivated me to clean everything on, inside, and around my desk (both physical and virtual). It motivated me to make changes in the way I work to be more productive.</p>

<p>What have y'all found helpful for encouraging big life shifts?</p>
]]></content>
  </entry>
  
</feed>
